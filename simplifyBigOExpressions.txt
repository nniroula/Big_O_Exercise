Step 1
Always look at worst case scenario. In other words, look for where you have to do maximum computations

O(n + 10) = O(n) or O(1) = O(n)
O(100 * n) = O(100n) = O(n)
O(25)  =  O(1)
O(n^2 + n^3)  = O(n^3)
O(n + n + n + n) = O(n)
O(1000 * log(n) + n) = O(log(n))    I am not sure in this one, may be O(n)
O(1000 * n * log(n) + n) = O(n*log(n)) = O(nlogn)
O(2^n + n^2) = O(2^n)   Exponent is worst case scenario
O(5 + 3 + 1) = O(1)
O(n + n^(1/2) + n^2 + n * log(n)^10) = O(n^2) Exponential function grows faster than logarithmic function


step 2, Time complexities of functions
1.
function logUpTo(n) {
  for (let i = 1; i <= n; i++) {
    console.log(i);
  }
}
Time complexity: O(n)


2.
function logAtLeast10(n) {
  for (let i = 1; i <= Math.max(n, 10); i++) {
    console.log(i);
  }
}
Time complexity: O(n)   min is 10 max is n

3. 
function logAtMost10(n) {
  for (let i = 1; i <= Math.min(n, 10); i++) {
    console.log(i);
  }
}
Time complexity: max = 10, so it is O(1) 

4. 
function onlyElementsAtEvenIndex(array) {
  let newArray = [];
  for (let i = 0; i < array.length; i++) {
    if (i % 2 === 0) {
      newArray.push(array[i]);
    }
  }
  return newArray;
}
Time complexity: O(n^2) Wrong it is O(n)

5. 
function subtotals(array) {
  let subtotalArray = [];
  for (let i = 0; i < array.length; i++) {
    let subtotal = 0;
    for (let j = 0; j <= i; j++) {
      subtotal += array[j];
    }
    subtotalArray.push(subtotal);
  }
  return subtotalArray;
}
Time complexity: O(n^2)

6. 
function vowelCount(str) {
  let vowelCount = {};
  const vowels = "aeiouAEIOU";

  for (let char of str) {
    if(vowels.includes(char)) {
      if(char in vowelCount) {
        vowelCount[char] += 1;
      } else {
        vowelCount[char] = 1;
      }
    }
  }

  return vowelCount;
}
Time complexity: O(n^3)   Wrong it is O(n) b/c vowels is fixed length


Part 3 - short answer
Answer the following questions

True or false: n^2 + n is O(n^2).  True

True or false: n^2 * n is O(n^3). True

True or false: n^2 + n is O(n).   False

What’s the time complexity of the .indexOf array method?  O(n)

What’s the time complexity of the .includes array method? O(1) 

What’s the time complexity of the .forEach array method? O(n)

What’s the time complexity of the .sort array method? O(n) 

What’s the time complexity of the .unshift array method? O(1)

What’s the time complexity of the .push array method? O(1) or O(n)

What’s the time complexity of the .splice array method? O(1)

What’s the time complexity of the .pop array method? O(n)

What’s the time complexity of the Object.keys() function? O(1)

BONUS

What’s the space complexity of the Object.keys() function? O(n)